#!/usr/bin/env python

import argparse
import collections
import enum
import functools
import os
import re
import subprocess
import sys

import colorama
import yaml


BASE_DIR = os.path.dirname(__file__)
MAX_FILENAME_LENGTH = 140  # ecryptfs has a limit of 140 characters


def _represent_none(self, _):
    return self.represent_scalar('tag:yaml.org,2002:null', '')


def _represent_ordereddict(dumper, data):
    value = []

    for item_key, item_value in data.items():
        node_key = dumper.represent_data(item_key)
        node_value = dumper.represent_data(item_value)

        value.append((node_key, node_value))

    return yaml.nodes.MappingNode(u'tag:yaml.org,2002:map', value)


yaml.add_representer(collections.OrderedDict, _represent_ordereddict)
yaml.add_representer(type(None), _represent_none)


def capture_stdout(cmd):
    return subprocess.run(cmd, shell=True, check=True, stdout=subprocess.PIPE).stdout.decode('utf-8')


def cached_property(*args, **kwargs):
    return property(functools.lru_cache()(*args, **kwargs))


class Type(enum.Enum):
    ADDED = 'added'  # New feature
    FIXED = 'fixed'  # Bug fix
    CHANGED = 'changed'  # Feature change
    DEPRECATED = 'deprecated'  # New deprecation
    REMOVED = 'removed'  # Feature removal
    SECURITY = 'security'  # Security fix
    PERFORMANCE = 'performance'  # Performance improvement
    OTHER = 'other'  # Other


class ParseTitle(argparse.Action):
    def __init__(self, option_strings, dest, required=False, help=None):
        super().__init__(option_strings=option_strings, dest=dest, default=None, required=required, help=help, nargs=argparse.REMAINDER)

    def __call__(self, parser, namespace, values, option_string=None):
        title = ' '.join(map(str.strip, values)).strip().replace('\r', '').replace('\n', '')
        setattr(namespace, self.dest, title)


class ParseGitUsername(argparse.Action):
    def __init__(self, option_strings, dest, required=False, help=None):
        super().__init__(option_strings=option_strings, dest=dest, default=None, required=required, help=help, nargs=0)

    def __call__(self, parser, namespace, values, option_string=None):
        username = capture_stdout('git config user.name').strip()
        setattr(namespace, self.dest, username)


class Changelog:
    def __init__(self):
        self.options = self.parse_options()

    def parse_options(self, args=None):
        parser = argparse.ArgumentParser()
        parser.add_argument('--amend', help='Amend the previous commit', action='store_true')
        parser.add_argument('-f', '--force', help='Overwrite an existing entry', action='store_true')
        parser.add_argument('-m', '--merge-request', help='Merge Request ID', type=int)
        parser.add_argument('-n', '--dry-run', help="Don't actually write anything, just print", action='store_true')
        parser.add_argument('-u', '--git-username', help='Use Git user.name configuration as the author', action=ParseGitUsername, dest='author')
        parser.add_argument('-t', '--type', help='The category of the change', type=Type, choices=Type)
        parser.add_argument('title', help='Changelog title', action=ParseTitle)
        return parser.parse_args(args)

    def execute(self):
        # self.assert_feature_branch()
        # self.assert_title()
        # self.assert_new_file()
        # TODO: Read type from stdin unless already set
        # self.assert_valid_type()

        sys.stdout.write(f'{colorama.Style.BRIGHT}create{colorama.Style.RESET_ALL} {self.file_path}\n')
        sys.stdout.write(self.contents)

        if not self.options.dry_run:
            self.write()
            if self.options.ammend_commit:
                self.ammend_commit()
            if self.editor:
                self.launch_editor()

    @cached_property
    def contents(self):
        return '---\n' + re.sub(r' +$', '', yaml.dump(collections.OrderedDict([
            ('title', self.title),
            ('merge_request', self.options.merge_request),
            ('author', self.options.author),
            ('type', self.options.type),
        ]), default_flow_style=False, sort_keys=False))

    @cached_property
    def title(self):
        if self.options.title:
            return self.options.title
        return self.last_commit_subject

    @cached_property
    def last_commit_subject(self):
        return capture_stdout('git log --format=%s -1').strip()

    @cached_property
    def file_path(self):
        base_path = os.path.join(self.unreleased_path, re.sub(r'[^\w-]', '-', self.branch_name))
        return base_path[0:MAX_FILENAME_LENGTH - 5] + '.yml'

    @cached_property
    def unreleased_path(self):
        return os.path.join(BASE_DIR, 'unreleased')

    @cached_property
    def branch_name(self):
        return capture_stdout('git symbolic-ref --short HEAD').strip()


if __name__ == '__main__':
    Changelog().execute()
