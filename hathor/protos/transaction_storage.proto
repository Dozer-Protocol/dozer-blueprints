syntax = "proto3";

package hathor;

import "hathor/protos/transaction.proto";

service TransactionStorage {
  rpc Exists(ExistsRequest) returns (ExistsResponse) {}
  rpc Get(GetRequest) returns (GetResponse) {}
  rpc GetMetadata(GetMetadataRequest) returns (GetMetadataResponse) {}
  rpc Save(SaveRequest) returns (SaveResponse) {}
  rpc Count(CountRequest) returns (CountResponse) {}
  rpc LatestTimestamp(LatestTimestampRequest) returns (LatestTimestampResponse) {}
  rpc MarkAs(MarkAsRequest) returns (MarkAsResponse) {}
  rpc List(ListRequest) returns (stream ListItemResponse) {}
  rpc ListTips(ListTipsRequest) returns (stream Interval) {}
  rpc ListNewest(ListNewestRequest) returns (stream ListItemResponse) {}
}

message ExistsRequest {
  bytes hash = 1;
}

message ExistsResponse {
  bool exists = 1;
}

message GetRequest {
  bytes hash = 1;
}

message GetResponse {
  BaseTransaction transaction = 1;
}

message GetMetadataRequest {
  bytes hash = 1;
}

message GetMetadataResponse {
  Metadata transaction_metadata = 1;
}

message SaveRequest {
  BaseTransaction transaction = 1;
  bool only_metadata = 2;
}

message SaveResponse {
  bool saved = 1;
}

enum TxType {
  ANY_TYPE = 0;
  TRANSACTION_TYPE = 1;
  BLOCK_TYPE = 2;
}

message CountRequest {
  TxType tx_type = 1;
}

message CountResponse {
  uint64 count = 1;
}

message LatestTimestampRequest {
}

message LatestTimestampResponse {
  uint32 timestamp = 1;
}

enum MarkType {
  FOR_CACHING = 0;
  VOIDED = 1;
}

message MarkAsRequest {
  BaseTransaction transaction = 1;
  MarkType mark_type = 2;
  bool remove_mark = 3;
}

message MarkAsResponse {
  bool marked = 1;
}

enum TimeFilterType {
  NO_FILTER = 0;
  ONLY_NEWER = 1;
  ONLY_OLDER = 2;
}

enum OrderBy {
  ANY_ORDER = 0;
  ASC_ORDER = 1;
  TOPOLOGICAL_ORDER = 2;
}

message ListRequest {
  TxType tx_type = 1;
  TimeFilterType time_filter = 2;
  uint32 timestamp = 3;
  OrderBy order_by = 4;
  bool filter_before = 5;
  oneof tx_oneof {
    bytes hash = 6;
    BaseTransaction tx = 7;
  }
  uint64 max_count = 8;
}

message ListTipsRequest {
  // optional timestamp, `oneof` used to differentiate unset (None) from 0
  oneof timestamp_oneof {
    uint32 timestamp = 1;
  }
  TxType tx_type = 2;
}

message Interval {
  double begin = 1;
  double end = 2;
  bytes data = 3;
}

message ListNewestRequest {
  uint64 count = 1;
  TxType tx_type = 2;
}

message ListItemResponse {
  oneof list_item_oneof {
    BaseTransaction transaction = 1;
    bool has_more = 2;
  }
}
